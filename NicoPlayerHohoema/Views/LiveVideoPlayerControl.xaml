<UserControl
    x:Name="PageRoot"
    x:Class="NicoPlayerHohoema.Views.LiveVideoPlayerControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:NicoPlayerHohoema.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:i="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:mvvm="using:Prism.Windows.Mvvm"
    xmlns:toolkit="using:WinRTXamlToolkit.Controls"
    xmlns:toolkitext="using:WinRTXamlToolkit.Controls.Extensions"
    xmlns:mybehavior="using:NicoPlayerHohoema.Views.Behaviors"
    xmlns:liveInfo="using:NicoPlayerHohoema.Views.LiveInfoContent"
    xmlns:comment="using:NicoPlayerHohoema.Views.CommentRenderer"
    xmlns:logicalTrigger="using:AdaptiveTriggerLibrary.Triggers.LogicalTriggers"
    xmlns:intractionTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInteractionTriggers"
    xmlns:uiTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInterfaceTriggers"
    xmlns:hardTrigger="using:AdaptiveTriggerLibrary.Triggers.HardwareInterfaceTriggers"
    xmlns:myTrigger ="using:NicoPlayerHohoema.Views.StateTrigger"
    xmlns:media="using:Microsoft.Xaml.Interactions.Media"
    xmlns:uwptoolkit="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
    xmlns:iconPack="using:MahApps.Metro.IconPacks"
    mc:Ignorable="d">



    <Border x:Name="LayoutRoot">
        <VisualStateManager.VisualStateGroups>

            <!-- 画面サイズごとの表示・非表示に切り替え -->
            <VisualStateGroup>
                <!-- 一番幅が広いとき -->
                <!--
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="721" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                    </VisualState.Setters>
                </VisualState>
                -->
                <!-- 中ぐらい -->
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="521" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                    </VisualState.Setters>
                </VisualState>
                <!-- 超狭い -->
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>






            <!-- ミュートの有効・無効 -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsMuted.Value}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="VolumeButton.Icon" Value="Mute" />
                        <Setter Target="MuteToggleButton.Icon" Value="Mute" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsMuted.Value, Converter={StaticResource InvertBoolean}}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="VolumeButton.Icon" Value="Volume" />
                        <Setter Target="MuteToggleButton.Icon" Value="Volume" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            
            <!-- Landscape固定ボタンの表示管理 -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <intractionTrigger:InteractionModeTrigger Condition="Touch" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="ForceRotateToggleButton.Visibility" Value="Visible" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <!-- モバイルの縦持ち時のLandscape固定処理 -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsForceLandscape.Value, Converter={StaticResource InvertBoolean}}" />

                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="LayoutRotateTranform.Angle" Value="0" />
                    </VisualState.Setters>
                </VisualState>

                <VisualState>
                    <VisualState.StateTriggers>
                        <logicalTrigger:MultiTrigger ConditionModifier="{StaticResource AndModifier}">
                            <logicalTrigger:MultiTrigger.Triggers>
                                <uiTrigger:OrientationTrigger Condition="Portrait" />
                                <intractionTrigger:InteractionModeTrigger Condition="Touch" />
                            </logicalTrigger:MultiTrigger.Triggers>
                        </logicalTrigger:MultiTrigger>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="LayoutRotateTranform.Angle" Value="90" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <!-- ウィンドウ非アクティブ時にマウス移動に反応するエリアを拡大する -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:WindowActiveTrigger Inverted="True" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="WindowDeactiveMouseMoveDetectWall.Visibility" Value="Visible" />
                    </VisualState.Setters>
                </VisualState>

                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:WindowActiveTrigger Inverted="False" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="WindowDeactiveMouseMoveDetectWall.Visibility" Value="Collapsed" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>


            <!-- Xbox -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                        <Setter Target="MenuSubItem_Share.Visibility" Value="Collapsed" />
                        <Setter Target="TitleLayout.Margin" Value="48 0" />
                        <Setter Target="TopBarLayout.Margin" Value="48 27 48 0" />
                    </VisualState.Setters>
                </VisualState>

            </VisualStateGroup>


            <!-- コメント投稿欄の表示 -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:FocusTrigger Target="{Binding ElementName=CommentTextBox}" Inverted="True" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="CommentActivateKeyTrigger.IsEnabled" Value="True" />
                        <Setter Target="{Binding NowCommentWriting.Value}" Value="False" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="True" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="CommentActivateKeyTrigger.IsEnabled" Value="False" />
                        <Setter Target="{Binding NowCommentWriting.Value}" Value="True" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

        </VisualStateManager.VisualStateGroups>

        <toolkit:LayoutTransformControl
                x:Name="LayoutTransform"
                >
            <toolkit:LayoutTransformControl.Transform>
                <RotateTransform x:Name="LayoutRotateTranform" Angle="0" />
            </toolkit:LayoutTransformControl.Transform>


            <Grid x:Name="MediaControl">

                <i:Interaction.Behaviors>

                    <!-- TODO: エンタキーでコメント入力開始 -->
                    <mybehavior:KeyboardTrigger Key="Enter">
                        <mybehavior:KeyboardTrigger.Actions>
                            <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="True" />
                            <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayCommentTextBox" Value="True" />
                            <mybehavior:SetFocus TargetObject="{Binding ElementName=CommentTextBox}" Delay="00:00:00.1" />
                        </mybehavior:KeyboardTrigger.Actions>
                    </mybehavior:KeyboardTrigger>


                    <mybehavior:MouseWheelTrigger>
                        <mybehavior:MouseWheelTrigger.UpActions>
                            <core:InvokeCommandAction Command="{Binding VolumeUpCommand}" />
                        </mybehavior:MouseWheelTrigger.UpActions>
                        <mybehavior:MouseWheelTrigger.DownActions>
                            <core:InvokeCommandAction Command="{Binding VolumeDownCommand}" />
                        </mybehavior:MouseWheelTrigger.DownActions>
                    </mybehavior:MouseWheelTrigger>


                    <core:EventTriggerBehavior EventName="Loaded">
                        <mybehavior:SetFocus TargetObject="{Binding ElementName=VolumeButton}" />
                    </core:EventTriggerBehavior>

                    <mybehavior:UINavigationTrigger Kind="Cancel" Hold="True" 
                                                        IsEnabled="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                        >
                        <core:InvokeCommandAction Command="{Binding ClosePlayerCommand}" />
                    </mybehavior:UINavigationTrigger>
                    
                </i:Interaction.Behaviors>

                <MediaPlayerElement x:Name="mediaElem"
                                  AutoPlay="True"
                            >
                    <i:Interaction.Behaviors>

                        <mybehavior:MediaPlayerSetter MediaPlayer="{Binding MediaPlayer}" />

                        <mybehavior:MediaPlayerElementContentHeightGetter ContentHeight="{Binding CommentCanvasHeight.Value, Mode=TwoWay}"
                                                                            />

                        <!-- 再生開始時にUIを非表示に-->
                        <!--
                        <core:DataTriggerBehavior Binding="{Binding CurrentState.Value}" ComparisonCondition="Equal" Value="Opening">
                            <core:CallMethodAction TargetObject="{Binding ElementName=PlayerControlAutoHide}" MethodName="Hide" />
                        </core:DataTriggerBehavior>
                        -->

                        <!-- 再生停止時にUIを表示状態に切替-->
                        <!--
                        <core:DataTriggerBehavior Binding="{Binding CurrentState.Value}" ComparisonCondition="Equal" Value="Closed">
                            <core:CallMethodAction TargetObject="{Binding ElementName=PlayerControlAutoHide}" MethodName="Show" />
                        </core:DataTriggerBehavior>
                        -->

                        <!-- 小窓表示時にUIを非表示に-->
                        <!--
                        <core:DataTriggerBehavior Binding="{Binding IsSmallWindowModeEnable.Value}" ComparisonCondition="Equal" Value="True">
                            <core:CallMethodAction TargetObject="{Binding ElementName=PlayerControlAutoHide}" MethodName="Hide" />
                        </core:DataTriggerBehavior>
                        -->
                        
                    </i:Interaction.Behaviors>
                </MediaPlayerElement>


                <Grid Height="{Binding CommentCanvasHeight.Value}">

                    <comment:CommentRenderer 
                                    x:Name="CommentRederer"
                                    Comments="{Binding LiveComments}"
                                    VideoPosition="{Binding LiveElapsedTime}"                                     
                                    Visibility="{Binding IsVisibleComment.Value, Converter={StaticResource BooleanToVisibility}}"
                                    CommentSizeScale="{Binding CommentFontScale.Value}"
                                    CommentDefaultColor="{Binding CommentDefaultColor.Value}"
                                    DefaultDisplayDuration="{Binding RequestCommentDisplayDuration.Value}"
                                    />

                    <Border  VerticalAlignment="Bottom"
                                 HorizontalAlignment="Left"
                                 Background="{ThemeResource SystemAltMediumColor}"
                                 >
                        <TextBlock Text="{Binding PermanentDisplayText.Value}" 
                                   TextWrapping="Wrap"
                                   />

                    </Border>

                </Grid>

                <ProgressRing Visibility="{Binding NowConnecting.Value, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}"
                                  IsActive="{Binding NowConnecting.Value, Mode=OneWay}"
                                  Width="48"
                                  Height="48"
                                  HorizontalAlignment="Right"
                                  VerticalAlignment="Top"
                                  Margin="24 88"      
                                  />


                <!-- ウィンドウ非アクティブ時に画面全体をマウス移動の反応対象にするためのコリジョン-->
                <Border x:Name="WindowDeactiveMouseMoveDetectWall" Background="Transparent"
                            >

                </Border>

                <Border IsHitTestVisible="True" Background="Transparent">
                    <i:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="Tapped">
                            <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="{Binding IsDisplayControlUI.Value, Converter={StaticResource InvertBoolean}}" />
                        </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                </Border>

                <toolkit:DockPanel x:Name="ControlUIRoot" >

                    <i:Interaction.Behaviors>
                        <mybehavior:VisiblityFadeChanger x:Name="PlayerControlAutoHide" 
                                                         Delay="{Binding AutoHideDelayTime.Value}"
                                                         IsAnimationEnable="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                         IsVisible="{Binding IsDisplayControlUI.Value, Mode=TwoWay}"
                        />

                        <!--
                        <mybehavior:UINavigationTrigger Kind="View" 
                                                        IsEnabled="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                        >
                            <core:CallMethodAction TargetObject="{Binding ElementName=PlayerControlAutoHide}" MethodName="Toggle" />
                            <mybehavior:SetFocus TargetObject="{Binding ElementName=RefreshButton}" />
                        </mybehavior:UINavigationTrigger>
                        -->
                    </i:Interaction.Behaviors>


                    <StackPanel toolkit:DockPanel.Dock="Top" >

                        <Border Background="{ThemeResource SystemAltMediumColor}">
                            <toolkit:DockPanel
                                x:Name="TopBarLayout"
                                Margin="0 0"
                                           >

                                <Button Command="{Binding ClosePlayerCommand}"
                                    Background="Transparent"
                                    toolkit:DockPanel.Dock="Left"
                                    UseSystemFocusVisuals="True"
                                    >
                                    <iconPack:PackIconMaterial Kind="Close" />
                                </Button>


                                <Border />

                            </toolkit:DockPanel>

                        </Border>




                        <Border Height="32">

                            <Border.Background>
                                <LinearGradientBrush StartPoint="1, 1" EndPoint="1, 0">
                                    <GradientStop Color="{Binding Source={StaticResource SystemAltMediumColor}, Converter={StaticResource ToTransparentColor}}" Offset="0.0" />
                                    <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" />
                                </LinearGradientBrush>
                            </Border.Background>

                            <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Tapped">
                                    <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                        </Border>

                    </StackPanel>

                    <StackPanel 
                                toolkit:DockPanel.Dock="Bottom"
                                HorizontalAlignment="Stretch"
                                >

                        <Border Height="48">
                            <Border.Background>
                                <LinearGradientBrush x:Name="ControlPanelBackgroundBrush" StartPoint="1, 0" EndPoint="1, 1">
                                    <GradientStop Color="{Binding Source={StaticResource SystemAltMediumColor}, Converter={StaticResource ToTransparentColor}}" Offset="0.0" x:Name="GradientStop1"/>
                                    <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" x:Name="GradientStop2" />
                                </LinearGradientBrush>
                            </Border.Background>

                            <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Tapped">
                                    <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                        </Border>

                        <StackPanel x:Name="TitleLayout" Background="{ThemeResource SystemAltMediumColor}">
                            <TextBlock Text="{Binding Title}" FontSize="24" Margin="8" HorizontalAlignment="Center" TextWrapping="Wrap" />

                            <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Tapped">
                                    <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                        </StackPanel>

                     

                        <!-- 生放送情報 -->
                        <toolkit:DockPanel toolkit:DockPanel.Dock="Top"
                                               Background="{ThemeResource SystemAltMediumColor}"
                                               >

                            <StackPanel Orientation="Horizontal"
                                            toolkit:DockPanel.Dock="Left"
                                            >
                                <!-- 放送時間 -->
                                <toolkit:DockPanel
                                     Margin="16"
                                    
                                     >

                                    <SymbolIcon Symbol="Clock" 
                                                Margin="8 0"
                                                Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                                />

                                    <TextBlock  HorizontalAlignment="Right"
                                               VerticalAlignment="Bottom"
                                               IsHitTestVisible="False"
                                               Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                               Margin="0 0 24 0"
                                                FontSize="18"
                                            >
                                        <Run Text="{Binding LiveElapsedTime, Converter={StaticResource TimeToMovieLengthConverter}}" />
                                    </TextBlock>
                                </toolkit:DockPanel>

                                <!-- 来場者数・コメント数 -->
                                <StackPanel Orientation="Horizontal"
                                            >
                                    <SymbolIcon Symbol="View" 
                                                Margin="8 0"
                                                Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                                />

                                    <TextBlock VerticalAlignment="Center"
                                               IsHitTestVisible="False"
                                               Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                               Margin="0 0 24 0"
                                                FontSize="18"
                                            >
                                        <Run Text="{Binding WatchCount.Value, Converter={StaticResource ToUserFriendlyNumber}}" />
                                    </TextBlock>

                                    <SymbolIcon Symbol="Comment" 
                                                Margin="8 0"
                                                Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                                />

                                    <TextBlock VerticalAlignment="Center"
                                               IsHitTestVisible="False"
                                               Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                               Margin="0 0 8 0"
                                                FontSize="18"
                                            >
                                        <Run Text="{Binding CommentCount.Value, Converter={StaticResource ToUserFriendlyNumber}}" />
                                    </TextBlock>

                                </StackPanel>
                            </StackPanel>


                            <StackPanel Orientation="Horizontal"
                                            toolkit:DockPanel.Dock="Right"
                                            Margin="0 0 16 0"
                                            >
                                <TextBlock VerticalAlignment="Center"
                                                Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                                FontSize="18"
                                               >
                                        <Run Text="{Binding RoomName}" />
                                        <Run Text="-" />
                                        <Run Text="{Binding SeetId}" />
                                        <Run Text="番" />
                                </TextBlock>
                            </StackPanel>

                            <Border />


                            <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Tapped">
                                    <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>

                        </toolkit:DockPanel>




                        <!-- 再生コントロール -->
                        <Grid Background="{ThemeResource SystemAltMediumColor}" Padding="8">

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <StackPanel Orientation="Horizontal">

                                <!-- 音量 -->
                                <AppBarButton Icon="Mute" 
                                              x:Name="VolumeButton"
                                              Height="64"
                                              Width="64"
                                              UseSystemFocusVisuals="True"
                                              >
                                    <AppBarButton.Flyout>
                                        <Flyout>
                                            <toolkit:DockPanel
                                                toolkit:DockPanel.Dock="Right"
                                                Margin="0 0 16 0"
                                                  Height="66"
                                                >

                                                <StackPanel Background="#AA777777"
                                                toolkit:DockPanel.Dock="Left"
                                                >
                                                    <AppBarButton Icon="Volume" 
                                                      Label="ミュート"
                                                      VerticalAlignment="Stretch"
                                                      x:Name="MuteToggleButton"
                                                      Command="{Binding ToggleMuteCommand}"    
                                                  >

                                                    </AppBarButton>
                                                </StackPanel>


                                                <StackPanel Margin="8 0" 
                                                Orientation="Vertical">



                                                    <Slider x:Name="VolumeSlider"
                                                            Orientation="Horizontal"
                                                            VerticalAlignment="Top"
                                                            Margin="8 4"
                                                            Value="{Binding SoundVolume.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                            IsThumbToolTipEnabled="True"
                                                            ThumbToolTipValueConverter="{StaticResource ToUserFriendlySoubleVolume}"
                                                            Maximum="1.0"
                                                            Minimum="0.0"
                                                            StepFrequency="0.01"
                                                            SmallChange="0.01"
                                                            LargeChange="0.1"
                                                            Height="32"
                                                            Width="160"
                                                            Background="Transparent"
                                                    >
                                                    </Slider>
                                                    <TextBlock Text="音量" 
                                                   VerticalAlignment="Center"
                                                   Margin="8 0 0 0"
                                                   HorizontalAlignment="Center"
                                                   FontSize="12"
                                                   />

                                                </StackPanel>



                                            </toolkit:DockPanel>
                                        </Flyout>
                                    </AppBarButton.Flyout>
                                </AppBarButton>

                                <!-- コメント -->
                                <ToggleButton Background="Transparent"
                                                  IsChecked="{x:Bind IsDisplayCommentTextBox, Mode=TwoWay}"
                                                  >
                                    <SymbolIcon Symbol="Comment" 
                                                />

                                </ToggleButton>

                            </StackPanel>

                            <StackPanel Orientation="Horizontal" x:Name="MiddleUIControlLayout"
                                        Grid.Column="1"
                                        >

                                <!-- 更新 -->
                                <AppBarButton Icon="Refresh" Label="更新"
                                              Command="{Binding UpdateCommand}"
                                              VerticalAlignment="Stretch"
                                              IsEnabled="{Binding NowUpdating.Value, Converter={StaticResource InvertBoolean}}"
                                              x:Name="RefreshButton"
                                              UseSystemFocusVisuals="True"
                                              />



                            </StackPanel>

                            <StackPanel Orientation="Horizontal"
                                        Grid.Column="2"
                                    HorizontalAlignment="Right"
                                        >
                                <AppBarButton Icon="FullScreen" Command="{Binding ToggleFullScreenCommand}"
                                              UseSystemFocusVisuals="True"
                                              />

                                

                                <AppBarButton Icon="More"
                                              UseSystemFocusVisuals="True"
                                              >
                                    <AppBarButton.Flyout>
                                        <MenuFlyout>


                                            <ToggleMenuFlyoutItem Text="コメントを表示" IsChecked="{Binding IsVisibleComment.Value, Mode=TwoWay}" />

                                            <MenuFlyoutSeparator />
                                            
                                            <MenuFlyoutItem Text="配信者情報" Command="{Binding OpenBroadcastCommunityCommand}" />

                                            <MenuFlyoutSeparator />
                                            
                                            <MenuFlyoutSubItem Text="共有" x:Name="MenuSubItem_Share">
                                                <MenuFlyoutItem Text="Twitterで共有" Command="{Binding ShereWithTwitterCommand}" />
                                                <MenuFlyoutItem Text="クリップボードにコピー" Command="{Binding ShareWithClipboardCommand}" />
                                            </MenuFlyoutSubItem>
                                            
                                            <MenuFlyoutSeparator />
                                            
                                            <MenuFlyoutItem Text="プレイヤー設定" Command="{Binding OpenPlayerSettingCommand}" />
                                            <ToggleMenuFlyoutItem Text="横持ち固定" 
                                                              x:Name="ForceRotateToggleButton" 
                                                              Visibility="Collapsed"
                                                              IsChecked="{Binding IsForceLandscape.Value, Mode=TwoWay}"
                                                              />

                                            <MenuFlyoutSeparator />
                                            
                                            <MenuFlyoutItem Text="小さく表示" Command="{Binding PlayerSmallWindowDisplayCommand}">
                                                <i:Interaction.Behaviors>
                                                    <core:EventTriggerBehavior EventName="Tapped">
                                                        <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                                    </core:EventTriggerBehavior>
                                                </i:Interaction.Behaviors>
                                            </MenuFlyoutItem>

                                        </MenuFlyout>
                                    </AppBarButton.Flyout>
                                </AppBarButton>
                            </StackPanel>

                        </Grid>





                        <!-- Comment関連 -->
                        <!-- コメントを書く -->
                        <Grid Visibility="{x:Bind IsDisplayCommentTextBox, Mode=OneWay}" 
                          x:Name="CommentLayout"
                          Background="{ThemeResource SystemAltMediumColor}"
                                Padding="0 8 0 0"
                          >

                            <toolkit:DockPanel HorizontalAlignment="Center">

                                <AppBarButton Icon="Clear" 
                                            toolkit:DockPanel.Dock="Left"
                                              Background="Transparent"
                                              VerticalAlignment="Center"
                                              Margin="0 0 8 8"
                                              UseSystemFocusVisuals="True"
                                >
                                    <i:Interaction.Behaviors>
                                        <core:EventTriggerBehavior EventName="Tapped">
                                            <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayCommentTextBox" Value="False" />
                                        </core:EventTriggerBehavior>
                                    </i:Interaction.Behaviors>
                                </AppBarButton>

                                <toolkit:WrapPanel Orientation="Horizontal">
                                    <Button Content="{Binding CommandString.Value}" 
                                                toolkit:DockPanel.Dock="Left"
                                                Margin="8 0 8 8"
                                                MinWidth="160"
                                                DataContext="{Binding}"
                                                x:Name="CommentCommandEditButton_Wide"
                                            Height="40"
                                            UseSystemFocusVisuals="True"
                                            >
                                        <Button.Flyout>
                                            <Flyout>
                                                <local:CommentCommandEditer DataContext="{Binding CommandEditerVM}" />
                                            </Flyout>
                                        </Button.Flyout>
                                    </Button>

                                    <TextBox x:Name="CommentTextBox" 
                                                 Text="{Binding WritingComment.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                 FontSize="18"
                                                 VerticalAlignment="Center"
                                                 MaxLength="75"
                                                 IsTabStop="True"
                                                 toolkitext:TextBoxFocusExtensions.AutoSelectOnFocus="True"
                                                 PlaceholderText="コメント"
                                                 HorizontalAlignment="Stretch"
                                             Margin="8 0 8 8"
                                             MinWidth="300"
                                             Height="40"
                                                 >
                                        <i:Interaction.Behaviors>
                                            <mybehavior:KeyboardTrigger Key="Escape">
                                                <mybehavior:KeyboardTrigger.Actions>
                                                    <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="False" />
                                                    <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="True" />
                                                </mybehavior:KeyboardTrigger.Actions>
                                            </mybehavior:KeyboardTrigger>

                                            <mybehavior:KeyboardTrigger Key="Enter">
                                                <mybehavior:KeyboardTrigger.Actions>
                                                    <core:InvokeCommandAction Command="{Binding CommentSubmitCommand}" />
                                                    <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="False" />
                                                    <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="True" />
                                                </mybehavior:KeyboardTrigger.Actions>
                                            </mybehavior:KeyboardTrigger>

                                        </i:Interaction.Behaviors>
                                    </TextBox>

                                    <Button Content="投稿"  Margin="8 0 8 8"
                                            Width="160" Height="40"
                                            Command="{Binding CommentSubmitCommand}"
                                            x:Name="CommentSubmitButton_Wide"
                                            HorizontalAlignment="Right"
                                            UseSystemFocusVisuals="True"
                                                />


                                </toolkit:WrapPanel>
                            </toolkit:DockPanel>
                        </Grid>
                    </StackPanel>


                    <Border IsHitTestVisible="True" Background="Transparent">
                        <i:Interaction.Behaviors>
                            <core:EventTriggerBehavior EventName="Tapped">
                                <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                            </core:EventTriggerBehavior>
                        </i:Interaction.Behaviors>

                    </Border>


                </toolkit:DockPanel>


                <!-- タップバリア
                         コメントテキストを書いたあとに画面のどこかをタップしたら
                         ロストフォーカスさせるためのやつ -->
                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0 0 0 56" 
                          Background="Transparent"
                          IsHitTestVisible="True"
                          Visibility="{Binding NowCommentWriting.Value, Converter={StaticResource BooleanToVisibility}}"
                          >

                </Grid>

                <Border Margin="16 80 0 0"
                            Visibility="{Binding HasSuggestion.Value, Converter={StaticResource BooleanToVisibility}}"
                            Background="{ThemeResource AppBarItemBackgroundThemeBrush}"
                            >
                    <StackPanel Margin="16">
                        <TextBlock Text="{Binding Suggestion.Value.Title}"
                                       FontSize="18"
                                       
                                       />


                        <ItemsControl ItemsSource="{Binding Suggestion.Value.Actions}"
                                          Margin="16 8 0 0"
                                          >
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <HyperlinkButton Content="{Binding Label}"
                                                         Command="{Binding SuggestActionCommand}"
                                                         Margin="0 8"
                                                         />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>

                    </StackPanel>
                </Border>
            </Grid>


        </toolkit:LayoutTransformControl>
    </Border>

        
</UserControl>
