<UserControl
    x:Class="NicoPlayerHohoema.Views.VideoPlayerControl"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:NicoPlayerHohoema.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    xmlns:comment="using:NicoPlayerHohoema.Views.CommentRenderer"
    xmlns:i="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:mvvm="using:Prism.Windows.Mvvm"
    xmlns:toolkit="using:WinRTXamlToolkit.Controls"
    xmlns:toolkitext="using:WinRTXamlToolkit.Controls.Extensions"
    xmlns:mybehavior="using:NicoPlayerHohoema.Views.Behaviors"
    xmlns:videoInfo="using:NicoPlayerHohoema.Views.VideoInfoContent"
    xmlns:logicalTrigger="using:AdaptiveTriggerLibrary.Triggers.LogicalTriggers"
    xmlns:intractionTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInteractionTriggers"
    xmlns:uiTrigger="using:AdaptiveTriggerLibrary.Triggers.UserInterfaceTriggers"
    xmlns:myTrigger ="using:NicoPlayerHohoema.Views.StateTrigger"
    xmlns:hardTrigger="using:AdaptiveTriggerLibrary.Triggers.HardwareInterfaceTriggers"
    xmlns:media="using:Microsoft.Xaml.Interactions.Media"
    xmlns:uwptoolkit="using:Microsoft.Toolkit.Uwp.UI.Animations.Behaviors"
    xmlns:uwpui="using:Microsoft.Toolkit.Uwp.UI"
    xmlns:iconPack="using:MahApps.Metro.IconPacks"
    d:DesignHeight="300"
    d:DesignWidth="400">

    <UserControl.Resources>
        <MenuFlyout x:Key="VideoOptionsFlyout">
            <MenuFlyoutSubItem Text="画質"
                                                               Visibility="{Binding CanToggleCurrentQualityCacheState.Value, Converter={StaticResource BooleanToVisibility}}"
                                                               >

                <MenuFlyoutItem Text="低画質に変更" 
                                                                      Command="{Binding TogglePlayQualityCommand}"
                                                                      x:Name="ChangeToLowQualityButton"
                                                                      Visibility="Collapsed"
                                                                      />

                <MenuFlyoutItem Text="オリジナル画質" 
                                                                Command="{Binding TogglePlayQualityCommand}"
                                                                x:Name="ChangeToOrigialQualityButton"
                                                                Visibility="Collapsed"
                                                                />
            </MenuFlyoutSubItem>
            <ToggleMenuFlyoutItem Text="キャッシュ" 
                                                                  IsChecked="{Binding IsSaveRequestedCurrentQualityCache.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                  IsEnabled="{Binding CanToggleCurrentQualityCacheState.Value}"
                                                              />
            <MenuFlyoutSeparator />
            <MenuFlyoutItem Text="動画情報" Command="{Binding OpenVideoInfoCommand}" />
            <MenuFlyoutSeparator />
            <MenuFlyoutItem Text="マイリストに追加" Command="{Binding AddMylistCommand}" />
            <MenuFlyoutSeparator />
            <MenuFlyoutItem Text="プレイヤー設定" Command="{Binding OpenPlayerSettingCommand}" />

            <MenuFlyoutItem Text="小さく表示" Command="{Binding PlayerSmallWindowDisplayCommand}" >
                <i:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="Tapped">
                        <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                    </core:EventTriggerBehavior>
                </i:Interaction.Behaviors>
            </MenuFlyoutItem>




        </MenuFlyout>
    </UserControl.Resources>
    <Grid x:Name="LayoutRoot" Background="{StaticResource AppBarBorderThemeBrush}">

        <VisualStateManager.VisualStateGroups>

            <!-- 画面サイズごとの表示・非表示に切り替え -->
            <VisualStateGroup>
                <!-- 一番幅が広いとき -->
                <!--
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="721" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                    </VisualState.Setters>
                </VisualState>
                -->
                <!-- 中ぐらい -->
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="521" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                    </VisualState.Setters>
                </VisualState>
                <!-- 超狭い -->
                <VisualState>
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="PreviewVideoPositionButon.Visibility" Value="Collapsed" />
                        <Setter Target="ForwardVideoPositionButon.Visibility" Value="Collapsed" />

                        <Setter Target="CommentTextBox.(Grid.Row)" Value="0" />
                        <Setter Target="CommentTextBox.(Grid.RowSpan)" Value="1" />
                        <Setter Target="CommentTextBox.(Grid).Column)" Value="0" />
                        <Setter Target="CommentTextBox.(Grid).ColumnSpan)" Value="6" />

                        <Setter Target="CommentCommandEditButton.(Grid.Row)" Value="1" />
                        <Setter Target="CommentCommandEditButton.(Grid.RowSpan)" Value="1" />
                        <Setter Target="CommentCommandEditButton.(Grid.Column)" Value="0" />
                        <Setter Target="CommentCommandEditButton.(Grid.ColumnSpan)" Value="3" />

                        <Setter Target="CommentSubmitButton.(Grid.Row)" Value="1" />
                        <Setter Target="CommentSubmitButton.(Grid.RowSpan)" Value="1" />
                        <Setter Target="CommentSubmitButton.(Grid.Column)" Value="3" />
                        <Setter Target="CommentSubmitButton.(Grid.ColumnSpan)" Value="3" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>


            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:EqualConditionStateTrigger Condition="Visible" Value="{Binding ElementName=UIControlLayout, Path=Visibility}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- 読み取り再生位置スライダーの表示状態 -->
                        <Setter Target="ReadOnlySeekBarSlider.Opacity" Value="0.0" />

                        <!-- コントローラーによるナビゲーション -->
                        <!--
                        <Setter Target="HideTrigger_1.IsEnabled" Value="False" />
                        <Setter Target="ShowTrigger_1.IsEnabled" Value="True" />
                        <Setter Target="ShowTrigger_2.IsEnabled" Value="True" />
                        -->

                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <!-- フルスクリーン -->
            <VisualStateGroup >
                <VisualState>
                    <VisualState.StateTriggers>
                        <hardTrigger:DeviceFamilyTrigger Condition="Xbox" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="FullscreenButton.Visibility" Value="Collapsed" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsFullScreen.Value, Mode=OneWay}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="FullscreenButtonIcon.Kind" Value="FullScreenExit" />
                    </VisualState.Setters>
                </VisualState>


            </VisualStateGroup>



            <!-- 再生・停止 -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding NowPlaying.Value}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="PlayPauseButtonIcon.Kind" Value="Pause" />

                        <Setter Target="TitleLayout.Visibility" Value="Collapsed" />

                    </VisualState.Setters>
                </VisualState>


            </VisualStateGroup>



            <!-- ミュートの有効・無効 -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsMuted.Value}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                        <Setter Target="VolumeButton.Symbol" Value="Mute" />
                        <Setter Target="MuteToggleButton.Icon" Value="Mute" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsMuted.Value, Converter={StaticResource InvertBoolean}}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="VolumeButton.Symbol" Value="Volume" />
                        <Setter Target="MuteToggleButton.Icon" Value="Volume" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <!-- ウィンドウ非アクティブ時にマウス移動に反応するエリアを拡大する -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:WindowActiveTrigger Inverted="True" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="WindowDeactiveMouseMoveDetectWall.Visibility" Value="Visible" />
                    </VisualState.Setters>
                </VisualState>

                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:WindowActiveTrigger Inverted="False" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="WindowDeactiveMouseMoveDetectWall.Visibility" Value="Collapsed" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>



            <!-- リピートモード -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsTrackRepeatModeEnable.Value}"  />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                        <Setter Target="RepeatModeToggleButtonIcon.Kind" Value="RepeatOnce" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsListRepeatModeEnable.Value}"  />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RepeatModeToggleButtonIcon.Kind" Value="Repeat" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="True"  />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="RepeatModeToggleButtonIcon.Kind" Value="RepeatOff" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <!-- シャッフルモード -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsShuffleEnabled.Value}"  />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>

                        <Setter Target="ToggleShuffleButtonIcon.Kind" Value="Shuffle" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="True"  />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="ToggleShuffleButtonIcon.Kind" Value="ShuffleDisabled" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>




            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsSmallWindowModeEnable.Value}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="UIControlLayout.Visibility" Value="Collapsed" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding NowPlaying.Value}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="UIControlLayout.Visibility" Value="Collapsed" />
                    </VisualState.Setters>
                </VisualState>

                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="True" />
                    </VisualState.StateTriggers>
                </VisualState>
            </VisualStateGroup>



            <!-- コントロールUI -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:EqualConditionStateTrigger Condition="Visible" Value="{Binding ElementName=UIControlLayout, Path=Visibility}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!-- 読み取り再生位置スライダーの表示状態 -->
                        <Setter Target="ReadOnlySeekBarSlider.Opacity" Value="0.0" />

                        <!-- コントローラーによるナビゲーション -->
                        <!--
                        <Setter Target="HideTrigger_1.IsEnabled" Value="False" />
                        <Setter Target="ShowTrigger_1.IsEnabled" Value="True" />
                        <Setter Target="ShowTrigger_2.IsEnabled" Value="True" />
                        -->

                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>


            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:EqualConditionStateTrigger Condition="Low" Value="{Binding CurrentVideoQuality.Value}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="ChangeToOrigialQualityButton.Visibility" Value="Visible" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:EqualConditionStateTrigger Condition="Original" Value="{Binding CurrentVideoQuality.Value}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="ChangeToLowQualityButton.Visibility" Value="Visible" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <!-- コメント投稿欄の表示 -->
            <VisualStateGroup>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{Binding IsSmallWindowModeEnable.Value}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="CommentActivateKeyTrigger.IsEnabled" Value="False" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <myTrigger:FocusTrigger Target="{Binding ElementName=CommentTextBox}" Inverted="True" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="CommentActivateKeyTrigger.IsEnabled" Value="True" />
                        <Setter Target="{Binding NowCommentWriting.Value}" Value="False" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState>
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="True" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="CommentActivateKeyTrigger.IsEnabled" Value="False" />
                        <Setter Target="{Binding NowCommentWriting.Value}" Value="True" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <toolkit:LayoutTransformControl
                x:Name="LayoutTransform"
                >
            <toolkit:LayoutTransformControl.Transform>
                <RotateTransform x:Name="LayoutRotateTranform" Angle="0" />
            </toolkit:LayoutTransformControl.Transform>







            <!-- Media Control -->
            <Grid x:Name="MediaControl" HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                  ContextFlyout="{StaticResource VideoOptionsFlyout}"
                  >

                <i:Interaction.Behaviors>

                    <core:EventTriggerBehavior EventName="Loaded">
                        <mybehavior:SetFocus TargetObject="{Binding ElementName=UIControlLayout}" />
                    </core:EventTriggerBehavior>

                    <mybehavior:KeyboardTrigger Key="Enter" x:Name="CommentActivateKeyTrigger">
                        <mybehavior:KeyboardTrigger.Actions>
                            <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="True" />
                            <core:ChangePropertyAction TargetObject="{x:Bind}" PropertyName="IsDisplayCommentTextBox" Value="True" />
                            <mybehavior:SetFocus TargetObject="{Binding ElementName=CommentTextBox}" Delay="00:00:00.1" />
                        </mybehavior:KeyboardTrigger.Actions>
                    </mybehavior:KeyboardTrigger>

                    <mybehavior:MouseWheelTrigger>
                        <mybehavior:MouseWheelTrigger.UpActions>
                            <core:InvokeCommandAction Command="{Binding VolumeUpCommand}" />
                        </mybehavior:MouseWheelTrigger.UpActions>
                        <mybehavior:MouseWheelTrigger.DownActions>
                            <core:InvokeCommandAction Command="{Binding VolumeDownCommand}" />
                        </mybehavior:MouseWheelTrigger.DownActions>
                    </mybehavior:MouseWheelTrigger>


                                        
                    <mybehavior:UINavigationTrigger Kind="Cancel" Hold="True" 
                                                        IsEnabled="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                        >
                        <core:InvokeCommandAction Command="{Binding ClosePlayerCommand}" />
                    </mybehavior:UINavigationTrigger>
                    

                    <mybehavior:UINavigationTrigger Kind="PageLeft" 
                                                        IsEnabled="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                        >
                        <core:InvokeCommandAction Command="{Binding PreviewVideoPositionCommand}" />
                    </mybehavior:UINavigationTrigger>
                    <mybehavior:UINavigationTrigger Kind="PageRight" 
                                                        IsEnabled="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                        >
                        <core:InvokeCommandAction Command="{Binding ForwardVideoPositionCommand}" />
                    </mybehavior:UINavigationTrigger>

                    <mybehavior:UINavigationTrigger Kind="Context1" 
                                                        IsEnabled="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                        >
                        <core:InvokeCommandAction Command="{Binding TogglePlayPauseCommand}" />
                    </mybehavior:UINavigationTrigger>

                    <mybehavior:UINavigationTrigger Kind="Context2" 
                                                        IsEnabled="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                        >
                        <core:ChangePropertyAction TargetObject="{Binding ElementName=PlaylistSplitView}" PropertyName="IsPaneOpen" Value="True" />
                    </mybehavior:UINavigationTrigger>

                    <!--
                    <core:EventTriggerBehavior EventName="PointerMoved">
                        <core:CallMethodAction TargetObject="{Binding ElementName=PlayerControlAutoHide}" MethodName="PreventAutoHide" />
                    </core:EventTriggerBehavior>
                    -->
                </i:Interaction.Behaviors>


                <MediaPlayerElement x:Name="MediaPlayerElement" Stretch="Uniform"
                                    AreTransportControlsEnabled="False"
                                    
                                    >
                    <i:Interaction.Behaviors>

                        <mybehavior:MediaPlayerSetter MediaPlayer="{Binding MediaPlayer}" />

                        <mybehavior:MediaPlayerElementContentHeightGetter ContentHeight="{Binding CommentCanvasHeight.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                        <!-- スペースキー入力で再生停止の切り替え-->
                        <mybehavior:KeyboardTrigger Key="Space" >
                            <core:InvokeCommandAction Command="{Binding TogglePlayPauseCommand}" />
                        </mybehavior:KeyboardTrigger>

                        <core:EventTriggerBehavior EventName="Tapped">
                            <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="True" />
                        </core:EventTriggerBehavior>

                    </i:Interaction.Behaviors>




                </MediaPlayerElement>


                <comment:CommentRenderer 
                                x:Name="CommentRederer"
                                Comments="{Binding Comments}"
                                VideoPosition="{Binding CommentVideoPosition.Value}"                                     
                                Visibility="{Binding IsVisibleComment.Value, Converter={StaticResource BooleanToVisibility}}"
                                CommentSizeScale="{Binding CommentFontScale.Value}"
                                Height="{Binding CommentCanvasHeight.Value}"
                                CommentDefaultColor="{Binding CommentDefaultColor.Value}"
                                DefaultDisplayDuration="{Binding RequestCommentDisplayDuration.Value}"
                                />






                <ProgressRing Visibility="{Binding NowBuffering.Value, Mode=OneWay, Converter={StaticResource BooleanToVisibility}}"
                                IsActive="{Binding NowBuffering.Value, Mode=OneWay}"
                                Width="48"
                                Height="48"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Top"
                                Margin="24 88"      
                                />

                <!-- ウィンドウ非アクティブ時に画面全体をマウス移動の反応対象にするためのコリジョン-->
                <Border x:Name="WindowDeactiveMouseMoveDetectWall" Background="Transparent"
                            >

                </Border>


                <!-- UI非表示時の再生位置バー -->
                <Slider Value="{Binding ElementName=SeekBarSlider, Path=Value, Mode=TwoWay}" 
                        Maximum="{Binding VideoLength.Value, Mode=OneWay}"
                        Style="{StaticResource VideoProgressBarStyle}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Bottom"
                        IsEnabled="False"
                        Opacity="0.6"
                        x:Name="ReadOnlySeekBarSlider"
                             >
                    <Slider.RenderTransform>
                        <TranslateTransform Y="17" />
                    </Slider.RenderTransform>


                </Slider>


                <Border IsHitTestVisible="True" Background="Transparent">
                    <i:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="Tapped">
                            <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="{Binding IsDisplayControlUI.Value, Converter={StaticResource InvertBoolean}}" />
                        </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                </Border>

                <toolkit:DockPanel 
                    x:Name="UIControlLayout"
                            >
                    <i:Interaction.Behaviors>
                        <mybehavior:VisiblityFadeChanger x:Name="PlayerControlAutoHide" 
                                                         Delay="{Binding AutoHideDelayTime.Value}"
                                                         IsAnimationEnable="{Binding IsSmallWindowModeEnable.Value, Converter={StaticResource InvertBoolean}}"
                                                         IsVisible="{Binding IsDisplayControlUI.Value, Mode=TwoWay}"
                        />

                        <core:DataTriggerBehavior Binding="{Binding IsDisplayControlUI.Value}" Value="True">
                            <mybehavior:SetFocus TargetObject="{Binding ElementName=PlayPauseButton}" Delay="00:00:00.00"  />
                        </core:DataTriggerBehavior>

                        
                    </i:Interaction.Behaviors>


                    <!-- プレイリスト 操作 -->
                    <StackPanel toolkit:DockPanel.Dock="Top" >

                        <Border Background="{ThemeResource SystemAltMediumColor}">
                            <toolkit:DockPanel
                                x:Name="PlaylistContainer"
                                Margin="0 0"
                                           >

                                <Button Command="{Binding ClosePlayerCommand}"
                                    Background="Transparent"
                                    toolkit:DockPanel.Dock="Left"
                                    UseSystemFocusVisuals="True"
                                    >
                                    <iconPack:PackIconMaterial Kind="Close" />
                                </Button>
                                
                                <StackPanel Orientation="Horizontal"
                                        toolkit:DockPanel.Dock="Right"
                                        >




                                    <Button Background="Transparent" 
                                            Command="{x:Bind TogglePlaylistPaneCommand}"
                                            >
                                        <iconPack:PackIconMaterial Kind="PlaylistCheck" >

                                        </iconPack:PackIconMaterial>

                                        <!--
                                        <Button.Flyout>

                                            <MenuFlyout>
                                                <MenuFlyoutItem Text="プレイリストを開く"
                                                                Command="{Binding OpenCurrentPlaylistPageCommand}"
                                                                />

                                                <MenuFlyoutSeparator />


                                                <ToggleMenuFlyoutItem Text="シャッフル" 
                                                                      IsChecked="{Binding IsShuffleEnabled.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                      />

                                                <MenuFlyoutItem Text="リピート" 
                                                                      Command="{Binding ToggleRepeatModeCommand}"
                                                                x:Name="RepeatMenuButton"
                                                                      />


                                                <MenuFlyoutSeparator />

                                                <MenuFlyoutItem Text="前の動画へ"
                                                                Command="{Binding OpenPreviousPlaylistItemCommand}"
                                                                Visibility="{Binding PlaylistCanGoBack.Value, Converter={StaticResource BooleanToVisibility}}"
                                                                />

                                                <MenuFlyoutItem Text="次の動画へ"
                                                                Command="{Binding OpenNextPlaylistItemCommand}"
                                                                Visibility="{Binding PlaylistCanGoNext.Value, Converter={StaticResource BooleanToVisibility}}"
                                                                />

                                            </MenuFlyout>
                                        </Button.Flyout>
                                        -->

                                    </Button>



                                    <!--
                                    
                                    -->



                                </StackPanel>



                                <Border />

                            </toolkit:DockPanel>

                        </Border>




                        <Border Height="32">

                            <Border.Background>
                                <LinearGradientBrush StartPoint="1, 1" EndPoint="1, 0">
                                    <GradientStop Color="{Binding Source={StaticResource SystemAltMediumColor}, Converter={StaticResource ToTransparentColor}}" Offset="0.0" />
                                    <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" />
                                </LinearGradientBrush>
                            </Border.Background>

                            <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Tapped">
                                    <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                        </Border>

                    </StackPanel>


                    <!-- 動画コンテンツ 操作 -->
                    <StackPanel toolkit:DockPanel.Dock="Bottom" >

                        <Border Height="48" BorderThickness="0">
                            <Border.Background>
                                <LinearGradientBrush x:Name="ControlPanelBackgroundBrush" StartPoint="1, 0" EndPoint="1, 1">
                                    <GradientStop Color="{Binding Source={StaticResource SystemAltMediumColor}, Converter={StaticResource ToTransparentColor}}" Offset="0.0" x:Name="GradientStop1"/>
                                    <GradientStop Color="{ThemeResource SystemAltMediumColor}" Offset="1.0" x:Name="GradientStop2" />
                                </LinearGradientBrush>
                            </Border.Background>

                            <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Tapped">
                                    <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>
                        </Border>

                        <StackPanel Background="{ThemeResource SystemAltMediumColor}"
                                    >


                            <StackPanel Margin="8 0" >
                                <TextBlock Text="{Binding VideoTitle}" 
                                       FontSize="24" 
                                       HorizontalAlignment="Center" 
                                       TextWrapping="Wrap"
                                       x:Name="TitleLayout"
                                       />

                                <i:Interaction.Behaviors>
                                    <core:EventTriggerBehavior EventName="Tapped">
                                        <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                    </core:EventTriggerBehavior>
                                </i:Interaction.Behaviors>
                            </StackPanel>

                            <!-- シークバー -->
                            <StackPanel >
                                <Grid 
                                    x:Name="ControlPanel_Center"
                                    Margin="0 0"
                                    toolkit:DockPanel.Dock="Top"
                                    
                                     >

                                    <Grid Margin="24 0 24 4">

                                        <!--
                                    <local:DownloadProgressBar 
                                            ProgressFragmentItems="{Binding ProgressFragments}"
                                            Margin="0 20 0 0"
                                            />
                                    -->


                                        <Slider x:Name="SeekBarSlider"
                                            Minimum="0.0" 
                                            Maximum="{Binding VideoLength.Value}"
                                            Value="{Binding SliderVideoPosition.Value, Mode=TwoWay}"
                                            Style="{StaticResource VideoProgressBarStyle}"
                                            Padding="0 16"
                                            StepFrequency="0.1"
                                                LargeChange="30"
                                                SmallChange="5"
                                            IsThumbToolTipEnabled="True"
                                            ThumbToolTipValueConverter="{StaticResource TimeToMovieLengthConverter}"
                                            HorizontalAlignment="Stretch"
                                            HorizontalContentAlignment="Stretch"
                                            VerticalAlignment="Center"
                                            IsEnabled="{Binding NowQualityChanging.Value, Converter={StaticResource InvertBoolean}}"
                                        
                                                Opacity="0.75"
                                         >
                                        </Slider>
                                    </Grid>


                                    <StackPanel HorizontalAlignment="Left"          
                                                VerticalAlignment="Bottom"
                                            Orientation="Horizontal"
                                            Margin="24 0 0 0"
                                            
                                            >

                                        <TextBlock  Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                                
                                                    >
                                        <Run Text="{Binding CurrentVideoQuality.Value, Converter={StaticResource QualityToText}}"
                                             
                                             />
                                        <Run Text="画質" />
                                        </TextBlock>

                                        <Border Width="8" />

                                        <TextBlock  Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                                Visibility="{Binding IsPlayWithCache.Value, Converter={StaticResource BooleanToVisibility}}"
                                                    >
                                        <Run Text="(キャッシュ済み)"
                                             />
                                        </TextBlock>
                                        <TextBlock  Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                                Visibility="{Binding IsPlayWithCache.Value, Converter={StaticResource BooleanToVisibilityInverted}}"
                                                    >
                                        <Run Text="(オンライン再生)" />
                                        </TextBlock>

                                    </StackPanel>


                                    <TextBlock  HorizontalAlignment="Right"
                                        VerticalAlignment="Bottom"
                                        IsHitTestVisible="False"
                                        Foreground="{ThemeResource ApplicationSecondaryForegroundThemeBrush}"
                                        Margin="0 0 24 0"
                                    >
                                        
                                    <Run Text="{Binding SliderVideoPosition.Value, Converter={StaticResource TimeToMovieLengthConverter}}" />
                                    <Run Text="/" />
                                    <Run Text="{Binding VideoLength.Value, Converter={StaticResource TimeToMovieLengthConverter}}" />
                                    </TextBlock>
                                </Grid>
                            </StackPanel>

                            <!-- 再生コントロール -->
                            <Grid Padding="8 0 8 0" x:Name="PlaybackControlContainer">

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <StackPanel Orientation="Horizontal">

                                    <!-- 音量 -->
                                    <Button Background="Transparent">

                                        <SymbolIcon 
                                        x:Name="VolumeButton"
                                        Symbol="Mute" 
                                        />
                                        <Button.Flyout>
                                            <Flyout>
                                                <toolkit:DockPanel
                                                toolkit:DockPanel.Dock="Right"
                                                Margin="0 0 16 0"
                                                  Height="66"
                                                >

                                                    <StackPanel Background="#AA777777"
                                                toolkit:DockPanel.Dock="Left"
                                                >
                                                        <AppBarButton Icon="Volume" 
                                                      Label="ミュート"
                                                      VerticalAlignment="Stretch"
                                                      x:Name="MuteToggleButton"
                                                      Command="{Binding ToggleMuteCommand}"    
                                                  >

                                                        </AppBarButton>
                                                    </StackPanel>


                                                    <StackPanel Background="#AA777777" Margin="8 0" 
                                                Orientation="Vertical">



                                                        <Slider x:Name="VolumeSlider"
                                                            Orientation="Horizontal"
                                                            VerticalAlignment="Top"
                                                            Margin="8 4"
                                                            Value="{Binding SoundVolume.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                            IsThumbToolTipEnabled="True"
                                                            ThumbToolTipValueConverter="{StaticResource ToUserFriendlySoubleVolume}"
                                                            Maximum="1.0"
                                                            Minimum="0.0"
                                                            StepFrequency="0.01"
                                                            SmallChange="0.01"
                                                            LargeChange="0.1"
                                                            Height="32"
                                                            Width="160"
                                                            Background="Transparent"
                                                        >
                                                            <i:Interaction.Behaviors>
                                                                <core:EventTriggerBehavior EventName="ValueChanged" >
                                                                    
                                                                </core:EventTriggerBehavior>
                                                            </i:Interaction.Behaviors>
                                                        </Slider>
                                                        <TextBlock Text="音量" 
                                                       VerticalAlignment="Center"
                                                       Margin="8 0 0 0"
                                                       HorizontalAlignment="Center"
                                                       FontSize="12"
                                                       />

                                                    </StackPanel>



                                                </toolkit:DockPanel>
                                            </Flyout>
                                        </Button.Flyout>
                                    </Button>

                                    <Button Command="{Binding ToggleDisplayCommentCommand}"
                                            Background="Transparent"
                                                  >
                                        <Grid>
                                            <iconPack:PackIconMaterial
                                                Kind="Comment"
                                                x:Name="CommentIcon"
                                                Width="24"
                                                Height="24"
                                                />
                                            <Canvas>
                                                <Line X1="{Binding ElementName=CommentIcon, Path=ActualWidth}" 
                                                      Y1="0"
                                                      X2="0" 
                                                      Y2="{Binding ElementName=CommentIcon, Path=ActualHeight}"
                                                  Stroke="DarkRed"
                                                      StrokeThickness="2"
                                                  Visibility="{Binding IsVisibleComment.Value, Converter={StaticResource BooleanToVisibilityInverted}}"
                                                  />
                                            </Canvas>
                                        </Grid>
                                    </Button>


                                </StackPanel>

                                <!-- 再生 -->
                                <StackPanel Orientation="Horizontal" x:Name="MiddleUIControlLayout"
                                        Grid.Column="1"
                                        >


                                    <Button Background="Transparent" 
                                            Command="{Binding PreviewVideoPositionCommand}"
                                        x:Name="PreviewVideoPositionButon"
                                            Margin="0 0 24 0"
                                        >
                                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3C;" 
                                           FontSize="18"
                                           />
                                    </Button>

                                    <Button Command="{Binding TogglePlayPauseCommand}"
                                        Background="Transparent"
                                        Margin="0 0 0 4"
                                            x:Name="PlayPauseButton"  
                                            
                                          >
                                        <iconPack:PackIconMaterial Kind="Play" 
                                                x:Name="PlayPauseButtonIcon"  
                                                RenderTransformOrigin="0.5, 0.5"
                                                >
                                            <iconPack:PackIconMaterial.RenderTransform>
                                                <CompositeTransform ScaleX="1.7" ScaleY="1.7"/>
                                            </iconPack:PackIconMaterial.RenderTransform>

                                        </iconPack:PackIconMaterial>
                                    </Button>

                                    <Button Background="Transparent"
                                        Command="{Binding ForwardVideoPositionCommand}"
                                        x:Name="ForwardVideoPositionButon"
                                            Margin="24 0 0 0"
                                        >
                                        <TextBlock FontFamily="Segoe MDL2 Assets" Text="&#xED3D;"
                                           FontSize="18"
                                           
                                                   
                                           />
                                    </Button>

                                </StackPanel>

                                <!-- Fullscreen / More -->
                                <toolkit:WrapPanel Orientation="Horizontal"
                                        Grid.Column="2"
                                    HorizontalAlignment="Right"
                                                   VerticalAlignment="Center"
                                        >

                                    <Button Background="Transparent">

                                        <iconPack:PackIconMaterial Kind="Speedometer"
                                                                   RenderTransformOrigin="0.5, 0.5"
                                                                   >
                                            <iconPack:PackIconMaterial.RenderTransform>
                                                <ScaleTransform ScaleX="1.5" ScaleY="1.5" />
                                            </iconPack:PackIconMaterial.RenderTransform>
                                        </iconPack:PackIconMaterial>

                                        <Button.Flyout>
                                            <Flyout>

                                                <toolkit:DockPanel>

                                                    <Grid toolkit:DockPanel.Dock="Top"
                                                          >

                                                        <TextBlock toolkit:DockPanel.Dock="Top"
                                                                   Opacity="0.7"
                                                                   HorizontalAlignment="Right"
                                                                   Width="150"
                                                               >
                                                            <Run Text="現在の速度倍率: "
                                                                 />
                                                            <Run Text="{Binding PlaybackRate.Value}"
                                                                 />

                                                        </TextBlock>
                                                    </Grid>


                                                    <StackPanel Orientation="Horizontal">
                                                        <Button Content="等倍速に戻す"
                                                                Command="{Binding ResetDefaultPlaybackRate}"
                                                                />

                                                        <Slider Orientation="Horizontal"
                                                                Maximum="2.0"
                                                                Minimum="0.25"
                                                                StepFrequency="0.25"
                                                                SmallChange="0.25"
                                                                LargeChange="1.00"
                                                                Value="{Binding PlaybackRate.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                MinWidth="200"
                                                                Margin="16 0 0 0"
                                                                TickFrequency="0.25"
                                                                IsThumbToolTipEnabled="True"
                                                            >
                                                        </Slider>

                                                    </StackPanel>

                                                </toolkit:DockPanel>
                                            </Flyout>
                                        </Button.Flyout>

                                    </Button>

                                    <Button Command="{Binding ToggleFullScreenCommand}"
                                        Background="Transparent"
                                        Margin="0 0 0 4"
                                            x:Name="FullscreenButton"  
                                            
                                          >
                                        <iconPack:PackIconMaterial Kind="Fullscreen" 
                                                x:Name="FullscreenButtonIcon"  
                                                RenderTransformOrigin="0.5, 0.5"
                                                >
                                            <iconPack:PackIconMaterial.RenderTransform>
                                                <CompositeTransform ScaleX="1.7" ScaleY="1.7"/>
                                            </iconPack:PackIconMaterial.RenderTransform>

                                        </iconPack:PackIconMaterial>
                                    </Button>

                                    <Button Background="Transparent"
                                            x:Name="VideoOptionsMenuButton"
                                            Flyout="{StaticResource VideoOptionsFlyout}"
                                            >
                                        <SymbolIcon Symbol="More" />

                                    </Button>
                                </toolkit:WrapPanel>

                            </Grid>


                            <!-- コメントを書く -->
                            <Grid x:Name="CommentLayout"
                                Padding="0 8 0 0"
                          >
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="1*" />
                                    <ColumnDefinition Width="1*" />
                                </Grid.ColumnDefinitions>

                                <TextBox x:Name="CommentTextBox" 
                                                Text="{Binding WritingComment.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                FontSize="18"
                                                VerticalAlignment="Center"
                                                MaxLength="75"
                                                IsTabStop="True"
                                                toolkitext:TextBoxFocusExtensions.AutoSelectOnFocus="True"
                                                PlaceholderText="コメント"
                                                HorizontalAlignment="Stretch"
                                            Margin="8 0 8 8"
                                            HorizontalContentAlignment="Stretch"
                                            Height="40"
                                             
                                             Grid.RowSpan="2"
                                             Grid.Column="1"
                                             Grid.ColumnSpan="4"
                                                >
                                    <i:Interaction.Behaviors>
                                        <mybehavior:KeyboardTrigger Key="Escape">
                                            <mybehavior:KeyboardTrigger.Actions>
                                                <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="False" />
                                                <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="True" />
                                            </mybehavior:KeyboardTrigger.Actions>
                                        </mybehavior:KeyboardTrigger>

                                        <mybehavior:KeyboardTrigger Key="Enter">
                                            <mybehavior:KeyboardTrigger.Actions>
                                                <core:InvokeCommandAction Command="{Binding CommentSubmitCommand}" />
                                                <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="False" />
                                                <core:ChangePropertyAction TargetObject="{Binding ElementName=CommentTextBox}" PropertyName="IsEnabled" Value="True" />
                                            </mybehavior:KeyboardTrigger.Actions>
                                        </mybehavior:KeyboardTrigger>

                                    </i:Interaction.Behaviors>
                                </TextBox>


                                <Button Content="{Binding CommandString.Value}" 
                                            Margin="8 0 8 8"
                                            HorizontalAlignment="Stretch"
                                            HorizontalContentAlignment="Center"
                                            DataContext="{Binding}"
                                            x:Name="CommentCommandEditButton"
                                            Height="40"
                                            UseSystemFocusVisuals="True"
                                            Grid.RowSpan="2"
                                             Grid.Column="0"
                                             Grid.ColumnSpan="1"
                                        >
                                    <Button.Flyout>
                                        <Flyout>
                                            <local:CommentCommandEditer DataContext="{Binding CommandEditerVM}" />
                                        </Flyout>
                                    </Button.Flyout>
                                </Button>

                                <Button Content="投稿"  Margin="8 0 8 8"
                                                Height="40"
                                                Command="{Binding CommentSubmitCommand}"
                                                x:Name="CommentSubmitButton"
                                            HorizontalAlignment="Stretch"
                                            HorizontalContentAlignment="Center"
                                            UseSystemFocusVisuals="True"
                                            Grid.RowSpan="2"
                                             Grid.Column="5"
                                             Grid.ColumnSpan="1"
                                            
                                                />
                            </Grid>
                        </StackPanel>
                    </StackPanel>


                    <Grid>
                        <Border IsHitTestVisible="True" Background="Transparent">
                            <i:Interaction.Behaviors>
                                <core:EventTriggerBehavior EventName="Tapped">
                                    <core:ChangePropertyAction TargetObject="{Binding IsDisplayControlUI, Mode=TwoWay}" PropertyName="Value" Value="False" />
                                </core:EventTriggerBehavior>
                            </i:Interaction.Behaviors>

                        </Border>
                        
                        
                    </Grid>
                    


                </toolkit:DockPanel>

                <SplitView PanePlacement="Right"
                           x:Name="PlaylistSplitView"
                               >

                    <SplitView.Pane>
                        <toolkit:DockPanel>
                            <StackPanel toolkit:DockPanel.Dock="Top">
                                
                                <toolkit:DockPanel>

                                    <StackPanel Orientation="Horizontal"
                                                toolkit:DockPanel.Dock="Right"
                                                >
                                        <Button Background="Transparent"          
                                                Command="{Binding ToggleShuffleCommand}"
                                                UseSystemFocusVisuals="True"
                                            >

                                            <iconPack:PackIconMaterial x:Name="ToggleShuffleButtonIcon"
                                                                   RenderTransformOrigin="0.5, 0.5"
                                                           >
                                                <iconPack:PackIconMaterial.RenderTransform>
                                                    <CompositeTransform ScaleX="1.1" ScaleY="1.1"/>
                                                </iconPack:PackIconMaterial.RenderTransform>

                                            </iconPack:PackIconMaterial>
                                        </Button>


                                        <Button Command="{Binding ToggleRepeatModeCommand}"
                                                Background="Transparent"
                                                UseSystemFocusVisuals="True"
                                            >
                                            <iconPack:PackIconMaterial x:Name="RepeatModeToggleButtonIcon"
                                                            Kind="Repeat" 
                                                           RenderTransformOrigin="0.5, 0.5"
                                                           >
                                                <iconPack:PackIconMaterial.RenderTransform>
                                                    <CompositeTransform ScaleX="1.1" ScaleY="1.1"/>
                                                </iconPack:PackIconMaterial.RenderTransform>
                                            </iconPack:PackIconMaterial>
                                        </Button>
                                    </StackPanel>

                                    <Button HorizontalAlignment="Stretch"
                                            Command="{Binding OpenCurrentPlaylistPageCommand}"
                                            Background="Transparent"
                                            >
                                        <TextBlock Text="{Binding CurrentPlaylistName.Value}" 
                                           Style="{StaticResource SubtitleTextBlockStyle}"
                                           Margin="16"
                                           />

                                    </Button>

                                </toolkit:DockPanel>

                                <toolkit:DockPanel>

                                    <TextBlock Text="{Binding VideoTitle}"
                                               toolkit:DockPanel.Dock="Bottom"
                                               HorizontalAlignment="Center"
                                               Margin="8 8"
                                               FontWeight="SemiBold"
                                               TextWrapping="Wrap"
                                               />
                                    
                                    <!-- プレイリストの次送り -->
                                    <Border toolkit:DockPanel.Dock="Left">
                                        <Button Width="32"
                                            VerticalAlignment="Stretch"
                                            Command="{Binding OpenPreviousPlaylistItemCommand}"
                                            IsEnabled="{Binding PlaylistCanGoBack.Value}"
                                            >
                                            <iconPack:PackIconMaterial Kind="ArrowLeft" />
                                        </Button>
                                    </Border>

                                    <Border toolkit:DockPanel.Dock="Right">
                                        <Button Width="32"
                                                VerticalAlignment="Stretch"
                                                Command="{Binding OpenNextPlaylistItemCommand}"
                                                IsEnabled="{Binding PlaylistCanGoNext.Value}"
                                                >
                                            <iconPack:PackIconMaterial Kind="ArrowRight" />
                                        </Button>
                                    </Border>


                                    <Image Source="{Binding ThumbnailUri.Value}"
                                           Height="140"
                                           />


                                </toolkit:DockPanel>
                                
                            </StackPanel>

                            <ListView ItemsSource="{Binding PlaylistItems}"
                                        SelectionMode="Single"
                                        SingleSelectionFollowsFocus="False"
                                      uwpui:ListViewBaseExtensions.Command="{Binding OpenPlaylistItemCommand}"
                                      IsItemClickEnabled="True"
                                          >
                                <ListView.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Title}"
                                                       TextWrapping="Wrap"
                                                       />
                                    </DataTemplate>
                                </ListView.ItemTemplate>
                            </ListView>
                        </toolkit:DockPanel>
                    </SplitView.Pane>

                    <SplitView.Content>
                        <Grid>



                            

                        </Grid>

                    </SplitView.Content>
                </SplitView>


                <!-- サポートされていないプロトコル・動画形式 -->
                <Border HorizontalAlignment="Left"
                                  VerticalAlignment="Top"
                                  Margin="24 88"
                                  Visibility="{Binding IsNotSupportVideoType, Converter={StaticResource BooleanToVisibility}}"
                                  Background="{StaticResource AppBarItemPointerOverBackgroundThemeBrush}"
                                Padding="16"
                          >

                    <StackPanel Orientation="Horizontal">

                        <SymbolIcon Symbol="Important"
                                        Foreground="Black"                                         
                                        Margin="8 8 16 8"
                                        />

                        <StackPanel>
                            <TextBlock Text="この動画は再生できません"
                                   VerticalAlignment="Center"    
                                           FontSize="18"
                                           Margin="0 0 0 8"
                                        Foreground="Black"                                         
                                   />

                            <TextBlock VerticalAlignment="Center"
                                        Foreground="Black"                                         
                                   >
                                    <Run Text="{Binding CannotPlayReason}" />
                            </TextBlock>

                            <HyperlinkButton Content="ブラウザで動画を見る"
                                                 Command="{Binding OpenVideoPageWithBrowser}"
                                                 >
                            </HyperlinkButton>

                        </StackPanel>
                    </StackPanel>
                </Border>

            </Grid>



        </toolkit:LayoutTransformControl>
    </Grid>
</UserControl>
